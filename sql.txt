-- Schema lead (caso não exista ainda)
CREATE SCHEMA IF NOT EXISTS lead;
SET search_path TO lead;

-- -----------------------------
-- Tabela principal: Unidades Consumidoras brutas
-- -----------------------------
CREATE TABLE lead_bruto (
    uc_id           SERIAL PRIMARY KEY,        
    cod_id          BIGINT NOT NULL,           
    cod_distribuidora INTEGER NOT NULL,        
    origem          VARCHAR(10) NOT NULL,      
    ano             SMALLINT NOT NULL,         
    status          VARCHAR(20) NOT NULL,      
    data_conexao    DATE,                      
    cnae            VARCHAR(10),               
    grupo_tensao    VARCHAR(50),               
    modalidade      VARCHAR(50),               
    tipo_sistema    VARCHAR(50),               
    situacao        VARCHAR(50),               
    classe          VARCHAR(50),               
    segmento        VARCHAR(50),               
    subestacao      VARCHAR(100),              
    municipio_ibge  VARCHAR(10),               
    bairro          VARCHAR(100),
    cep             VARCHAR(20),
    pac             NUMERIC(15,2),             
    pn_con          BIGINT,                    
    descricao       TEXT,
    lead_id         INTEGER,  -- FK para lead.lead

    CONSTRAINT uq_uc_unique UNIQUE (cod_distribuidora, cod_id, ano),
    CONSTRAINT fk_cod_distribuidora FOREIGN KEY (cod_distribuidora) REFERENCES lead.distribuidora(cod_distribuidora),
    CONSTRAINT fk_lead_bruto_lead FOREIGN KEY (lead_id) REFERENCES lead.lead(lead_id),
    CONSTRAINT fk_cnae FOREIGN KEY (cnae) REFERENCES lead.cnae_ref(cnae)
);

-- -----------------------------
-- Tabela de Demanda
-- -----------------------------
CREATE TABLE lead_demanda (
    uc_id          INTEGER PRIMARY KEY,
    dem_ponta      NUMERIC[],
    dem_fora_ponta NUMERIC[],
    CONSTRAINT fk_demanda_uc FOREIGN KEY (uc_id) REFERENCES lead_bruto(uc_id)
);

-- -----------------------------
-- Tabela de Energia
-- -----------------------------
CREATE TABLE lead_energia (
    uc_id     INTEGER PRIMARY KEY,
    consumo   NUMERIC[],
    potencia  INTEGER,
    CONSTRAINT fk_energia_uc FOREIGN KEY (uc_id) REFERENCES lead_bruto(uc_id)
);

-- -----------------------------
-- Tabela de Qualidade
-- -----------------------------
CREATE TABLE lead_qualidade (
    uc_id  INTEGER PRIMARY KEY,
    dic    NUMERIC[],
    fic    NUMERIC[],
    CONSTRAINT fk_qualidade_uc FOREIGN KEY (uc_id) REFERENCES lead_bruto(uc_id)
);

-- -----------------------------
-- Tabela de Leads consolidados
-- -----------------------------
CREATE TABLE lead (
    lead_id        SERIAL PRIMARY KEY,
    id_interno     BIGINT NOT NULL,
    cod_distribuidora INTEGER NOT NULL,
    municipio_ibge VARCHAR(10), 
    bairro         VARCHAR(100),
    cep            VARCHAR(20),
    latitude       DOUBLE PRECISION,
    longitude      DOUBLE PRECISION,
    status         VARCHAR(20),
    ultima_atualizacao TIMESTAMP,
    CONSTRAINT fk_lead_distribuidora FOREIGN KEY (cod_distribuidora) REFERENCES lead.distribuidora(cod_distribuidora)
);

-- -----------------------------
-- Pontos Notáveis (PONNOT)
-- -----------------------------
CREATE TABLE ponto_notavel (
    pn_id       BIGINT PRIMARY KEY,
    latitude    DOUBLE PRECISION,
    longitude   DOUBLE PRECISION
);

-- -----------------------------
-- Tabela de Distribuidoras
-- -----------------------------
CREATE TABLE distribuidora (
    cod_distribuidora INTEGER PRIMARY KEY,
    nome              VARCHAR(100)
);

-- -----------------------------
-- Tabela de CNAE
-- -----------------------------
CREATE TABLE cnae_ref (
    cnae VARCHAR(10) PRIMARY KEY,
    descricao TEXT
);

-- -----------------------------
-- Tabela de Informações Enriquecidas (CNPJ, Razão Social...)
-- -----------------------------
CREATE TABLE info_leads (
    info_id         SERIAL PRIMARY KEY,
    lead_id         INTEGER NOT NULL,
    cnpj            VARCHAR(20),
    razao_social    VARCHAR(150),
    nome_fantasia   VARCHAR(150),
    cnae_principal  VARCHAR(10),
    natureza_juridica VARCHAR(100),
    data_abertura   DATE,
    uf              VARCHAR(2),
    municipio       VARCHAR(100),
    telefone        VARCHAR(50),
    email           VARCHAR(100),
    situacao_cadastral VARCHAR(50),
    atualizado_em   TIMESTAMP,
    CONSTRAINT fk_info_lead FOREIGN KEY(lead_id) REFERENCES lead(lead_id)
);

-- -----------------------------
-- Tabela de dados do Google Places
-- -----------------------------
CREATE TABLE geo_google (
    geo_id                SERIAL PRIMARY KEY,
    lead_id               INTEGER NOT NULL,
    nome_estabelecimento VARCHAR(150),
    endereco_formatado   VARCHAR(200),
    telefone             VARCHAR(50),
    site                 VARCHAR(150),
    raw_json             TEXT,
    atualizado_em        TIMESTAMP,
    CONSTRAINT fk_geo_google_lead FOREIGN KEY(lead_id) REFERENCES lead(lead_id)
);

-- -----------------------------
-- Status de importação
-- -----------------------------
CREATE TABLE import_status (
    distribuidora    VARCHAR(100) NOT NULL,
    ano              SMALLINT NOT NULL,
    camada           VARCHAR(10) NOT NULL,
    status           VARCHAR(20),
    data_execucao    TIMESTAMP,
    PRIMARY KEY(distribuidora, ano, camada)
);
